[gd_resource type="Environment" load_steps=8 format=3 uid="uid://detfmk4yuxymg"]

[ext_resource type="FastNoiseLite" uid="uid://bwjowamk6u511" path="res://Assets/Textures/cloud1_noise_lite.tres" id="1_m0gmh"]
[ext_resource type="FastNoiseLite" uid="uid://7skoxmqtmiem" path="res://Assets/Textures/cloud2_noise_lite.tres" id="2_py4ff"]

[sub_resource type="Shader" id="Shader_n7bvf"]
code = "// NOTE: Shader automatically converted from Godot Engine 4.4.stable's ProceduralSkyMaterial.

shader_type sky;
render_mode use_debanding;

uniform vec4 sky_top_color : source_color = vec4(0.385, 0.454, 0.55, 1.0);
uniform vec4 sky_horizon_color : source_color = vec4(0.646, 0.656, 0.67, 1.0);
uniform float sky_curve : hint_range(0, 1) = 0.15;
uniform float sky_energy = 1.0; // In Lux.
uniform sampler2D sky_cover : filter_linear, source_color, hint_default_black;
uniform vec4 sky_cover_modulate : source_color = vec4(1.0, 1.0, 1.0, 1.0);
uniform vec4 ground_bottom_color : source_color = vec4(0.2, 0.169, 0.133, 1.0);
uniform vec4 ground_horizon_color : source_color = vec4(0.646, 0.656, 0.67, 1.0);
uniform float ground_curve : hint_range(0, 1) = 0.02;
uniform float ground_energy = 1.0;
uniform float sun_angle_max = 30.0;
uniform float sun_curve : hint_range(0, 1) = 0.15;
uniform float exposure : hint_range(0, 128) = 1.0;

uniform sampler2D cloud_texture;
uniform sampler2D cloud_texture2;
uniform vec2 cloud_direction;
uniform vec2 cloud_direction2;
uniform vec2 cloud_scale;
uniform float cloud_distance;
uniform float cloud_speed;
uniform float cloud_speed2;
uniform vec4 cloud_color : source_color = vec4(1.0, 1.0, 1.0, 1.0); // white, fully opaque

void sky() {
	float v_angle = acos(clamp(EYEDIR.y, -1.0, 1.0));
	float c = (1.0 - v_angle / (PI * 0.5));
	vec3 sky = mix(sky_horizon_color.rgb, sky_top_color.rgb, clamp(1.0 - pow(1.0 - c, 1.0 / sky_curve), 0.0, 1.0));
	sky *= sky_energy;

	if (LIGHT0_ENABLED) {
		float sun_angle = acos(dot(LIGHT0_DIRECTION, EYEDIR));
		if (sun_angle < LIGHT0_SIZE) {
			sky = LIGHT0_COLOR * LIGHT0_ENERGY;
		} else if (sun_angle < sun_angle_max) {
			float c2 = (sun_angle - LIGHT0_SIZE) / (sun_angle_max - LIGHT0_SIZE);
			sky = mix(LIGHT0_COLOR * LIGHT0_ENERGY, sky, clamp(1.0 - pow(1.0 - c2, 1.0 / sun_curve), 0.0, 1.0));
		}
	}

	if (LIGHT1_ENABLED) {
		float sun_angle = acos(dot(LIGHT1_DIRECTION, EYEDIR));
		if (sun_angle < LIGHT1_SIZE) {
			sky = LIGHT1_COLOR * LIGHT1_ENERGY;
		} else if (sun_angle < sun_angle_max) {
			float c2 = (sun_angle - LIGHT1_SIZE) / (sun_angle_max - LIGHT1_SIZE);
			sky = mix(LIGHT1_COLOR * LIGHT1_ENERGY, sky, clamp(1.0 - pow(1.0 - c2, 1.0 / sun_curve), 0.0, 1.0));
		}
	}

	if (LIGHT2_ENABLED) {
		float sun_angle = acos(dot(LIGHT2_DIRECTION, EYEDIR));
		if (sun_angle < LIGHT2_SIZE) {
			sky = LIGHT2_COLOR * LIGHT2_ENERGY;
		} else if (sun_angle < sun_angle_max) {
			float c2 = (sun_angle - LIGHT2_SIZE) / (sun_angle_max - LIGHT2_SIZE);
			sky = mix(LIGHT2_COLOR * LIGHT2_ENERGY, sky, clamp(1.0 - pow(1.0 - c2, 1.0 / sun_curve), 0.0, 1.0));
		}
	}

	if (LIGHT3_ENABLED) {
		float sun_angle = acos(dot(LIGHT3_DIRECTION, EYEDIR));
		if (sun_angle < LIGHT3_SIZE) {
			sky = LIGHT3_COLOR * LIGHT3_ENERGY;
		} else if (sun_angle < sun_angle_max) {
			float c2 = (sun_angle - LIGHT3_SIZE) / (sun_angle_max - LIGHT3_SIZE);
			sky = mix(LIGHT3_COLOR * LIGHT3_ENERGY, sky, clamp(1.0 - pow(1.0 - c2, 1.0 / sun_curve), 0.0, 1.0));
		}
	}

	vec4 sky_cover_texture = texture(sky_cover, SKY_COORDS);
	sky += (sky_cover_texture.rgb * sky_cover_modulate.rgb) * sky_cover_texture.a * sky_cover_modulate.a * sky_energy;

	c = (v_angle - (PI * 0.5)) / (PI * 0.5);
	vec3 ground = mix(ground_horizon_color.rgb, ground_bottom_color.rgb, clamp(1.0 - pow(1.0 - c, 1.0 / ground_curve), 0.0, 1.0));
	ground *= ground_energy;

	vec2 sky_uv = EYEDIR.xz / EYEDIR.y;
	vec3 clouds = texture(cloud_texture, (sky_uv*cloud_scale) + (TIME*cloud_direction*cloud_speed*.01)).rgb - texture(cloud_texture2, (sky_uv * cloud_scale) + (TIME * cloud_direction2 * cloud_speed2*.01)).rgb;

	// Extract brightness from cloud color and apply smoothstep to control opacity
	float raw_cloud_brightness = max(clouds.r, max(clouds.g, clouds.b));
	float cloud_alpha = smoothstep(0.0, 0.8, raw_cloud_brightness) * cloud_color.a;

	// Blend clouds with sky
	sky = mix(sky, cloud_color.rgb, cloud_alpha);
	COLOR = mix(ground, sky, step(0.0, EYEDIR.y)) * exposure;
}
"

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_ksesm"]
seamless = true
noise = ExtResource("1_m0gmh")

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_py4ff"]
seamless = true
noise = ExtResource("2_py4ff")

[sub_resource type="ShaderMaterial" id="ShaderMaterial_74q3j"]
shader = SubResource("Shader_n7bvf")
shader_parameter/sky_top_color = Color(0.05, 0.075, 0.2, 1)
shader_parameter/sky_horizon_color = Color(0.12125, 0.105, 0.3, 1)
shader_parameter/sky_curve = 0.075
shader_parameter/sky_energy = 1.0
shader_parameter/sky_cover_modulate = Color(1, 1, 1, 1)
shader_parameter/ground_bottom_color = Color(0.12125, 0.105, 0.3, 1)
shader_parameter/ground_horizon_color = Color(0.121569, 0.105882, 0.301961, 1)
shader_parameter/ground_curve = 1e-05
shader_parameter/ground_energy = 1.0
shader_parameter/sun_angle_max = 0.0
shader_parameter/sun_curve = 0.15
shader_parameter/exposure = 1.0
shader_parameter/cloud_texture = SubResource("NoiseTexture2D_ksesm")
shader_parameter/cloud_texture2 = SubResource("NoiseTexture2D_py4ff")
shader_parameter/cloud_direction = Vector2(-1, 0.5)
shader_parameter/cloud_direction2 = Vector2(0.5, -1)
shader_parameter/cloud_scale = Vector2(0.05, 0.05)
shader_parameter/cloud_distance = 0.073
shader_parameter/cloud_speed = 0.4
shader_parameter/cloud_speed2 = 0.3
shader_parameter/cloud_color = Color(0.275, 0.3125, 0.5, 0.196078)

[sub_resource type="Sky" id="Sky_wipc4"]
sky_material = SubResource("ShaderMaterial_74q3j")

[resource]
background_mode = 2
background_color = Color(0.0878965, 0.123076, 0.250316, 1)
sky = SubResource("Sky_wipc4")
ambient_light_source = 2
ambient_light_color = Color(0.3, 0.35, 0.6, 1)
ambient_light_sky_contribution = 0.0
tonemap_white = 0.75
ssao_enabled = true
ssao_intensity = 1.0
ssil_enabled = true
sdfgi_use_occlusion = true
glow_enabled = true
glow_levels/1 = 1.0
glow_levels/2 = 0.18
glow_levels/3 = 2.0
glow_levels/4 = 0.5
glow_normalized = true
fog_enabled = true
fog_light_color = Color(0.02, 0.08, 0.2, 1)
fog_density = 0.015
fog_sky_affect = 0.0
volumetric_fog_enabled = true
volumetric_fog_density = 0.005
volumetric_fog_albedo = Color(0.075, 0.13125, 0.3, 1)
volumetric_fog_emission = Color(0.075, 0.13125, 0.3, 1)
volumetric_fog_anisotropy = 0.56
volumetric_fog_length = 32.0
volumetric_fog_sky_affect = 0.0
adjustment_enabled = true
adjustment_contrast = 1.02
adjustment_saturation = 1.02
